{
    "docs": [
        {
            "location": "/", 
            "text": "LBRY JSON-RPC API Documentation\n\n\nabandon_name\n\n\nDEPRECIATED, use abandon_claim\n\nArgs:\n    'txid': txid of claim, string\nReturn:\n    txid\n\n\n\n\nblob_announce_all\n\n\nAnnounce all blobs to the DHT\n\nArgs:\n    None\nReturns:\n\n\n\n\nblob_get\n\n\nDownload and return a sd blob\n\nArgs:\n    sd_hash\nReturns\n    sd blob, dict\n\n\n\n\nblob_list\n\n\nReturns all blob hashes\n\nArgs:\n    None\nReturns:\n    list of blob hashes\n\n\n\n\nblob_reflect_all\n\n\nReflects all saved blobs\n\nArgs:\n    None\nReturns:\n    True\n\n\n\n\nblock_show\n\n\nGet contents of a block\n\nArgs:\n    blockhash: hash of the block to look up\nReturns:\n    requested block\n\n\n\n\nclaim_abandon\n\n\nAbandon a name and reclaim credits from the claim\n\nArgs:\n    'txid': txid of claim, string\n    'nout': nout of claim, integer\nReturn:\n    txid : txid of resulting transaction if succesful\n    fee : fee paid for the transaction if succesful\n\n\n\n\nclaim_list\n\n\nGet claims for a name\n\nArgs:\n    name: file name\n    txid: transaction id of a name claim transaction\nReturns\n    list of name claims\n\n\n\n\nclaim_list_mine\n\n\nList my name claims\n\nArgs:\n    None\nReturns\n    list of name claims\n\n\n\n\nclaim_new_support\n\n\nSupport a name claim\n\nArgs:\n    'name': name\n    'claim_id': claim id of claim to support\n    'amount': amount to support by\nReturn:\n    txid : txid of resulting transaction if succesful\n    nout : nout of the resulting support claim if succesful\n    fee : fee paid for the transaction if succesful\n\n\n\n\nclaim_show\n\n\nResolve claim info from a LBRY uri\n\nArgs:\n    'name': name to look up, string, do not include lbry:// prefix\n    'txid': optional, if specified, look for claim with this txid\n    'nout': optional, if specified, look for claim with this nout\n\nReturns:\n    txid, amount, value, n, height\n\n\n\n\ncommands\n\n\nReturn a list of available commands\n\nReturns:\n    list\n\n\n\n\nconfigure_ui\n\n\nConfigure the UI being hosted\n\nArgs, optional:\n    'branch': a branch name on lbryio/lbry-web-ui\n    'path': path to a ui folder\n\n\n\n\ndaemon_stop\n\n\nStop lbrynet-daemon\n\nReturns:\n    shutdown message\n\n\n\n\nfile_delete\n\n\nDelete a lbry file\n\nArgs:\n    'file_name': downloaded file name, string\nReturns:\n    confirmation message\n\n\n\n\nfile_get\n\n\nGet a file\n\nArgs:\n    'name': get file by lbry uri,\n    'sd_hash': get file by the hash in the name claim,\n    'file_name': get file by its name in the downloads folder,\nReturns:\n    'completed': bool\n    'file_name': string\n    'key': hex string\n    'points_paid': float\n    'stopped': bool\n    'stream_hash': base 58 string\n    'stream_name': string\n    'suggested_file_name': string\n    'upload_allowed': bool\n    'sd_hash': string\n\n\n\n\nfile_list\n\n\nList files\n\nArgs:\n    None\nReturns:\n    List of files, with the following keys:\n    'completed': bool\n    'file_name': string\n    'key': hex string\n    'points_paid': float\n    'stopped': bool\n    'stream_hash': base 58 string\n    'stream_name': string\n    'suggested_file_name': string\n    'upload_allowed': bool\n    'sd_hash': string\n\n\n\n\nfile_seed\n\n\nStart or stop seeding a file\n\nArgs:\n    'status': \nstart\n or \nstop\n\n    'name': start file by lbry uri,\n    'sd_hash': start file by the hash in the name claim,\n    'file_name': start file by its name in the downloads folder,\nReturns:\n    confirmation message\n\n\n\n\nget\n\n\nDownload stream from a LBRY uri.\n\nArgs:\n    'name': name to download, string\n    'download_directory': optional, path to directory where file will be saved, string\n    'file_name': optional, a user specified name for the downloaded file\n    'stream_info': optional, specified stream info overrides name\n    'timeout': optional\n    'wait_for_write': optional, defaults to True. When set, waits for the file to\n        only start to be written before returning any results.\nReturns:\n    'stream_hash': hex string\n    'path': path of download\n\n\n\n\nget_availability\n\n\nGet stream availability for a winning claim\n\nArg:\n    name (str): lbry uri\n\nReturns:\n     peers per blob / total blobs\n\n\n\n\nget_mean_availability\n\n\nGet mean blob availability\n\nArgs:\n    None\nReturns:\n    Mean peers for a blob\n\n\n\n\nget_nametrie\n\n\nGet the nametrie\n\nArgs:\n    None\nReturns:\n    Name claim trie\n\n\n\n\nhelp\n\n\nReturn a useful message for an API command\n\nArgs:\n    'command': optional, command to retrieve documentation for\nReturns:\n    if given a command, returns documentation about that command\n    otherwise returns general help message\n\n\n\n\npeer_list\n\n\nGet peers for blob hash\n\nArgs:\n    'blob_hash': blob hash\nReturns:\n    List of contacts\n\n\n\n\npublish\n\n\nMake a new name claim and publish associated data to lbrynet\n\nArgs:\n    'name': name to be claimed, string\n    'file_path': path to file to be associated with name, string\n    'bid': amount of credits to commit in this claim, float\n    'metadata': metadata dictionary\n    optional 'fee'\nReturns:\n    'success' : True if claim was succesful , False otherwise\n    'reason' : if not succesful, give reason\n    'txid' : txid of resulting transaction if succesful\n    'nout' : nout of the resulting support claim if succesful\n    'fee' : fee paid for the claim transaction if succesful\n    'claimid' : claimid of the resulting transaction\n\n\n\n\nreflect\n\n\nReflect a stream\n\nArgs:\n    sd_hash: sd_hash of lbry file\nReturns:\n    True or traceback\n\n\n\n\nreport_bug\n\n\nReport a bug to slack\n\nArgs:\n    'message': string, message to send\nReturns:\n    True if successful\n\n\n\n\nresolve_name\n\n\nResolve stream info from a LBRY uri\n\nArgs:\n    'name': name to look up, string, do not include lbry:// prefix\nReturns:\n    metadata from name claim\n\n\n\n\nreveal\n\n\nReveal a file or directory in file browser\n\nArgs:\n    'path': path to be selected in file browser\nReturns:\n    True, opens file browser\n\n\n\n\nsend_amount_to_address\n\n\nSend credits to an address\n\nArgs:\n    amount: the amount to send\n    address: the address of the recipient\nReturns:\n    True if payment successfully scheduled\n\n\n\n\nsettings_get\n\n\nGet lbrynet daemon settings\n\nArgs:\n    None\nReturns:\n    'run_on_startup': bool,\n    'data_rate': float,\n    'max_key_fee': float,\n    'download_directory': string,\n    'max_upload': float, 0.0 for unlimited\n    'max_download': float, 0.0 for unlimited\n    'upload_log': bool,\n    'search_timeout': float,\n    'download_timeout': int\n    'max_search_results': int,\n    'wallet_type': string,\n    'delete_blobs_on_remove': bool,\n    'peer_port': int,\n    'dht_node_port': int,\n    'use_upnp': bool,\n\n\n\n\nsettings_set\n\n\nSet lbrynet daemon settings\n\nArgs:\n    'run_on_startup': bool,\n    'data_rate': float,\n    'max_key_fee': float,\n    'download_directory': string,\n    'max_upload': float, 0.0 for unlimited\n    'max_download': float, 0.0 for unlimited\n    'upload_log': bool,\n    'download_timeout': int\nReturns:\n    settings dict\n\n\n\n\nstatus\n\n\nReturn daemon status\n\nArgs:\n    session_status: bool\n    blockchain_status: bool\nReturns:\n    daemon status\n\n\n\n\nstream_cost_estimate\n\n\nGet estimated cost for a lbry stream\n\nArgs:\n    'name': lbry uri\n    'size': stream size, in bytes. if provided an sd blob won't be downloaded.\nReturns:\n    estimated cost\n\n\n\n\ntransaction_list\n\n\nList transactions\n\nArgs:\n    None\nReturns:\n    list of transactions\n\n\n\n\ntransaction_show\n\n\nGet a decoded transaction from a txid\n\nArgs:\n    txid: txid hex string\nReturns:\n    JSON formatted transaction\n\n\n\n\nversion\n\n\nGet lbry version information\n\nArgs:\n    None\nReturns:\n    \nplatform\n: platform string\n    \nos_release\n: os release string\n    \nos_system\n: os name\n    \nlbrynet_version: \n: lbrynet_version,\n    \nlbryum_version: \n: lbryum_version,\n    \nui_version\n: commit hash of ui version being used\n    \nremote_lbrynet\n: most recent lbrynet version available from github\n    \nremote_lbryum\n: most recent lbryum version available from github\n\n\n\n\nwallet_balance\n\n\nReturn the balance of the wallet\n\nReturns:\n    balance, float\n\n\n\n\nwallet_is_address_mine\n\n\nChecks if an address is associated with the current wallet.\n\nArgs:\n    address: string\nReturns:\n    is_mine: bool\n\n\n\n\nwallet_new_address\n\n\nGenerate a new wallet address\n\nArgs:\n    None\nReturns:\n    new wallet address, base 58 string\n\n\n\n\nwallet_public_key\n\n\nGet public key from wallet address\n\nArgs:\n    wallet: wallet address, base58\nReturns:\n    public key", 
            "title": "API"
        }, 
        {
            "location": "/#lbry-json-rpc-api-documentation", 
            "text": "", 
            "title": "LBRY JSON-RPC API Documentation"
        }, 
        {
            "location": "/#abandon_name", 
            "text": "DEPRECIATED, use abandon_claim\n\nArgs:\n    'txid': txid of claim, string\nReturn:\n    txid", 
            "title": "abandon_name"
        }, 
        {
            "location": "/#blob_announce_all", 
            "text": "Announce all blobs to the DHT\n\nArgs:\n    None\nReturns:", 
            "title": "blob_announce_all"
        }, 
        {
            "location": "/#blob_get", 
            "text": "Download and return a sd blob\n\nArgs:\n    sd_hash\nReturns\n    sd blob, dict", 
            "title": "blob_get"
        }, 
        {
            "location": "/#blob_list", 
            "text": "Returns all blob hashes\n\nArgs:\n    None\nReturns:\n    list of blob hashes", 
            "title": "blob_list"
        }, 
        {
            "location": "/#blob_reflect_all", 
            "text": "Reflects all saved blobs\n\nArgs:\n    None\nReturns:\n    True", 
            "title": "blob_reflect_all"
        }, 
        {
            "location": "/#block_show", 
            "text": "Get contents of a block\n\nArgs:\n    blockhash: hash of the block to look up\nReturns:\n    requested block", 
            "title": "block_show"
        }, 
        {
            "location": "/#claim_abandon", 
            "text": "Abandon a name and reclaim credits from the claim\n\nArgs:\n    'txid': txid of claim, string\n    'nout': nout of claim, integer\nReturn:\n    txid : txid of resulting transaction if succesful\n    fee : fee paid for the transaction if succesful", 
            "title": "claim_abandon"
        }, 
        {
            "location": "/#claim_list", 
            "text": "Get claims for a name\n\nArgs:\n    name: file name\n    txid: transaction id of a name claim transaction\nReturns\n    list of name claims", 
            "title": "claim_list"
        }, 
        {
            "location": "/#claim_list_mine", 
            "text": "List my name claims\n\nArgs:\n    None\nReturns\n    list of name claims", 
            "title": "claim_list_mine"
        }, 
        {
            "location": "/#claim_new_support", 
            "text": "Support a name claim\n\nArgs:\n    'name': name\n    'claim_id': claim id of claim to support\n    'amount': amount to support by\nReturn:\n    txid : txid of resulting transaction if succesful\n    nout : nout of the resulting support claim if succesful\n    fee : fee paid for the transaction if succesful", 
            "title": "claim_new_support"
        }, 
        {
            "location": "/#claim_show", 
            "text": "Resolve claim info from a LBRY uri\n\nArgs:\n    'name': name to look up, string, do not include lbry:// prefix\n    'txid': optional, if specified, look for claim with this txid\n    'nout': optional, if specified, look for claim with this nout\n\nReturns:\n    txid, amount, value, n, height", 
            "title": "claim_show"
        }, 
        {
            "location": "/#commands", 
            "text": "Return a list of available commands\n\nReturns:\n    list", 
            "title": "commands"
        }, 
        {
            "location": "/#configure_ui", 
            "text": "Configure the UI being hosted\n\nArgs, optional:\n    'branch': a branch name on lbryio/lbry-web-ui\n    'path': path to a ui folder", 
            "title": "configure_ui"
        }, 
        {
            "location": "/#daemon_stop", 
            "text": "Stop lbrynet-daemon\n\nReturns:\n    shutdown message", 
            "title": "daemon_stop"
        }, 
        {
            "location": "/#file_delete", 
            "text": "Delete a lbry file\n\nArgs:\n    'file_name': downloaded file name, string\nReturns:\n    confirmation message", 
            "title": "file_delete"
        }, 
        {
            "location": "/#file_get", 
            "text": "Get a file\n\nArgs:\n    'name': get file by lbry uri,\n    'sd_hash': get file by the hash in the name claim,\n    'file_name': get file by its name in the downloads folder,\nReturns:\n    'completed': bool\n    'file_name': string\n    'key': hex string\n    'points_paid': float\n    'stopped': bool\n    'stream_hash': base 58 string\n    'stream_name': string\n    'suggested_file_name': string\n    'upload_allowed': bool\n    'sd_hash': string", 
            "title": "file_get"
        }, 
        {
            "location": "/#file_list", 
            "text": "List files\n\nArgs:\n    None\nReturns:\n    List of files, with the following keys:\n    'completed': bool\n    'file_name': string\n    'key': hex string\n    'points_paid': float\n    'stopped': bool\n    'stream_hash': base 58 string\n    'stream_name': string\n    'suggested_file_name': string\n    'upload_allowed': bool\n    'sd_hash': string", 
            "title": "file_list"
        }, 
        {
            "location": "/#file_seed", 
            "text": "Start or stop seeding a file\n\nArgs:\n    'status':  start  or  stop \n    'name': start file by lbry uri,\n    'sd_hash': start file by the hash in the name claim,\n    'file_name': start file by its name in the downloads folder,\nReturns:\n    confirmation message", 
            "title": "file_seed"
        }, 
        {
            "location": "/#get", 
            "text": "Download stream from a LBRY uri.\n\nArgs:\n    'name': name to download, string\n    'download_directory': optional, path to directory where file will be saved, string\n    'file_name': optional, a user specified name for the downloaded file\n    'stream_info': optional, specified stream info overrides name\n    'timeout': optional\n    'wait_for_write': optional, defaults to True. When set, waits for the file to\n        only start to be written before returning any results.\nReturns:\n    'stream_hash': hex string\n    'path': path of download", 
            "title": "get"
        }, 
        {
            "location": "/#get_availability", 
            "text": "Get stream availability for a winning claim\n\nArg:\n    name (str): lbry uri\n\nReturns:\n     peers per blob / total blobs", 
            "title": "get_availability"
        }, 
        {
            "location": "/#get_mean_availability", 
            "text": "Get mean blob availability\n\nArgs:\n    None\nReturns:\n    Mean peers for a blob", 
            "title": "get_mean_availability"
        }, 
        {
            "location": "/#get_nametrie", 
            "text": "Get the nametrie\n\nArgs:\n    None\nReturns:\n    Name claim trie", 
            "title": "get_nametrie"
        }, 
        {
            "location": "/#help", 
            "text": "Return a useful message for an API command\n\nArgs:\n    'command': optional, command to retrieve documentation for\nReturns:\n    if given a command, returns documentation about that command\n    otherwise returns general help message", 
            "title": "help"
        }, 
        {
            "location": "/#peer_list", 
            "text": "Get peers for blob hash\n\nArgs:\n    'blob_hash': blob hash\nReturns:\n    List of contacts", 
            "title": "peer_list"
        }, 
        {
            "location": "/#publish", 
            "text": "Make a new name claim and publish associated data to lbrynet\n\nArgs:\n    'name': name to be claimed, string\n    'file_path': path to file to be associated with name, string\n    'bid': amount of credits to commit in this claim, float\n    'metadata': metadata dictionary\n    optional 'fee'\nReturns:\n    'success' : True if claim was succesful , False otherwise\n    'reason' : if not succesful, give reason\n    'txid' : txid of resulting transaction if succesful\n    'nout' : nout of the resulting support claim if succesful\n    'fee' : fee paid for the claim transaction if succesful\n    'claimid' : claimid of the resulting transaction", 
            "title": "publish"
        }, 
        {
            "location": "/#reflect", 
            "text": "Reflect a stream\n\nArgs:\n    sd_hash: sd_hash of lbry file\nReturns:\n    True or traceback", 
            "title": "reflect"
        }, 
        {
            "location": "/#report_bug", 
            "text": "Report a bug to slack\n\nArgs:\n    'message': string, message to send\nReturns:\n    True if successful", 
            "title": "report_bug"
        }, 
        {
            "location": "/#resolve_name", 
            "text": "Resolve stream info from a LBRY uri\n\nArgs:\n    'name': name to look up, string, do not include lbry:// prefix\nReturns:\n    metadata from name claim", 
            "title": "resolve_name"
        }, 
        {
            "location": "/#reveal", 
            "text": "Reveal a file or directory in file browser\n\nArgs:\n    'path': path to be selected in file browser\nReturns:\n    True, opens file browser", 
            "title": "reveal"
        }, 
        {
            "location": "/#send_amount_to_address", 
            "text": "Send credits to an address\n\nArgs:\n    amount: the amount to send\n    address: the address of the recipient\nReturns:\n    True if payment successfully scheduled", 
            "title": "send_amount_to_address"
        }, 
        {
            "location": "/#settings_get", 
            "text": "Get lbrynet daemon settings\n\nArgs:\n    None\nReturns:\n    'run_on_startup': bool,\n    'data_rate': float,\n    'max_key_fee': float,\n    'download_directory': string,\n    'max_upload': float, 0.0 for unlimited\n    'max_download': float, 0.0 for unlimited\n    'upload_log': bool,\n    'search_timeout': float,\n    'download_timeout': int\n    'max_search_results': int,\n    'wallet_type': string,\n    'delete_blobs_on_remove': bool,\n    'peer_port': int,\n    'dht_node_port': int,\n    'use_upnp': bool,", 
            "title": "settings_get"
        }, 
        {
            "location": "/#settings_set", 
            "text": "Set lbrynet daemon settings\n\nArgs:\n    'run_on_startup': bool,\n    'data_rate': float,\n    'max_key_fee': float,\n    'download_directory': string,\n    'max_upload': float, 0.0 for unlimited\n    'max_download': float, 0.0 for unlimited\n    'upload_log': bool,\n    'download_timeout': int\nReturns:\n    settings dict", 
            "title": "settings_set"
        }, 
        {
            "location": "/#status", 
            "text": "Return daemon status\n\nArgs:\n    session_status: bool\n    blockchain_status: bool\nReturns:\n    daemon status", 
            "title": "status"
        }, 
        {
            "location": "/#stream_cost_estimate", 
            "text": "Get estimated cost for a lbry stream\n\nArgs:\n    'name': lbry uri\n    'size': stream size, in bytes. if provided an sd blob won't be downloaded.\nReturns:\n    estimated cost", 
            "title": "stream_cost_estimate"
        }, 
        {
            "location": "/#transaction_list", 
            "text": "List transactions\n\nArgs:\n    None\nReturns:\n    list of transactions", 
            "title": "transaction_list"
        }, 
        {
            "location": "/#transaction_show", 
            "text": "Get a decoded transaction from a txid\n\nArgs:\n    txid: txid hex string\nReturns:\n    JSON formatted transaction", 
            "title": "transaction_show"
        }, 
        {
            "location": "/#version", 
            "text": "Get lbry version information\n\nArgs:\n    None\nReturns:\n     platform : platform string\n     os_release : os release string\n     os_system : os name\n     lbrynet_version:  : lbrynet_version,\n     lbryum_version:  : lbryum_version,\n     ui_version : commit hash of ui version being used\n     remote_lbrynet : most recent lbrynet version available from github\n     remote_lbryum : most recent lbryum version available from github", 
            "title": "version"
        }, 
        {
            "location": "/#wallet_balance", 
            "text": "Return the balance of the wallet\n\nReturns:\n    balance, float", 
            "title": "wallet_balance"
        }, 
        {
            "location": "/#wallet_is_address_mine", 
            "text": "Checks if an address is associated with the current wallet.\n\nArgs:\n    address: string\nReturns:\n    is_mine: bool", 
            "title": "wallet_is_address_mine"
        }, 
        {
            "location": "/#wallet_new_address", 
            "text": "Generate a new wallet address\n\nArgs:\n    None\nReturns:\n    new wallet address, base 58 string", 
            "title": "wallet_new_address"
        }, 
        {
            "location": "/#wallet_public_key", 
            "text": "Get public key from wallet address\n\nArgs:\n    wallet: wallet address, base58\nReturns:\n    public key", 
            "title": "wallet_public_key"
        }
    ]
}